----------------------------------------InMemoryCrud :---------------------------------------------
Employee.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace InMemoryCrudAssignment
{
    public class Employee
    {
        public int Id { get; set; }
        public string Name { get; set; }
            public double Salary { get; set; }
         public string Gender { get; set; }
         
        public string Address { get; set; }
         
    }

}
--------------------------------------------------------------------------------------------------
IMemoryRepository.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace InMemoryCrudAssignment
{
    public interface IEmployeeRepository
    {
        Employee GetEmployee(int Id);
        IEnumerable<Employee> GetAllEmployee();
        Employee Add(Employee employee);
        Employee Update(Employee employeeChanges);
        Employee Delete(int Id);
    }
}
-------------------------------------------------------------------------------------------------
MockEmployeeRepository.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Linq;

namespace InMemoryCrudAssignment
{
    public class MockEmployeeRepository : IEmployeeRepository
    { 
        private static List<Employee>_employeelist;
            public MockEmployeeRepository() 
    {
        _employeelist=new List<Employee>(){
            new Employee() { Id = 1,Name = "Pri",Salary = 90000,Gender = "Male",Address = "Jhansi"},
        new Employee() { Id = 2,Name = "Priyansh",Salary = 80000,Gender = "Male",Address = "Mumbai"},
        new Employee() { Id = 3,Name = "Priya",Salary = 60000,Gender = "Female",Address = "Gorakhpur"},
    };
}
public Employee Add(Employee employee)
{
     employee.Id=_employeelist.Max(x => x.Id)+1;
            _employeelist.Add(employee);
            return employee;
        }

        public Employee Delete(int Id)
        {
            Employee employee = _employeelist.FirstOrDefault(x => x.Id==Id);
            if (employee != null)
            {
                _employeelist.Remove(employee);
            }
            return employee;

        }

        public IEnumerable<Employee> GetAllEmployee()
        {
            return _employeelist;
        }

        public Employee GetEmployee(int Id)
        {
            return _employeelist.FirstOrDefault(e => e.Id == Id);
        }

        public Employee Update(Employee employeeChanges)
        {
            Employee employee = _employeelist.FirstOrDefault(e => e.Id == employeeChanges.Id);
            if (employee != null)
            {
                employee.Id = employeeChanges.Id;
                employee.Name = employeeChanges.Name;
                employee.Salary= employeeChanges.Salary;
                employee.Address = employeeChanges.Address;
                employee.Gender = employeeChanges.Gender;

            }
            return employee;
        }
    }
    
    }

--------------------------------------------------------------------------------------------------
Program.cs
using System.ComponentModel.DataAnnotations;

namespace InMemoryCrudAssignment
{
    internal class Program
    {
        static void Main(string[] args)
        {
            MockEmployeeRepository db= new MockEmployeeRepository();
            Display(db);
            Employee a = db.Add(new Employee { Name = "Yash", Salary = 45000, Gender = "Male", Address = "UP" });
            Console.WriteLine("Record Added: {0} {1} {2} {3}", a.Id, a.Name, a.Salary, a.Gender,a.Address);
            Display(db);
            db.Delete(2);
            Display(db);
            Employee e = new Employee { Id = 5, Name = "Tejas", Salary = 50000, Gender = "Male", Address = "MP" };
            UpdateData(e, db);

        }
        static void Display(MockEmployeeRepository db)
        {
            foreach (Employee a in db.GetAllEmployee())
                Console.WriteLine(": {0} {1} {2} {3} {4}", a.Id, a.Name, a.Salary, a.Gender , a.Address);
        }
        static void UpdateData(Employee e,MockEmployeeRepository db)
        {
            db.Update(e);
            Display(db);
        }

    }
}
